<div class="bg-white pt-10 lg:py-8 lg:overflow-hidden">
  <div class="mx-auto max-w-6xl px-8 py-10">
    <h2 class="text-3xl font-extrabold tracking-tight text-center mb-6 sm:text-4xl lg:text-left">Introducing: The Minitest Cookbook</h2>

    <p class="text-xl text-gray-500 mb-4">
      If you want to use even the most simple tool effectively, you
      need to know how to hold it.  That's why I'm writing <b>The
      Minitest Cookbook</b> - to help Ruby and Rails developers at all
      skill levels master the techniques they need to write clear,
      maintainable tests and help others to do the same.  That process
      begins with a set of fundamentals where you'll learn how to:
    </p>

    <ul class="list-disc text-xl pl-6 mb-4 leading-normal text-gray-500">
      <li>Write tests using both assertions and specs</li>
      <li>Structure your tests for clarity and confidence</li>
      <li>Validate your code with assertions and expectations</li>
      <li>Use mocks, stubs, and other kinds of test doubles</li>
      <li>Effectively manage test data</li>
      <li>Share common code between tests</li>
      <li>Run one test case or your whole suite</li>
    </ul>

    <p class="text-xl text-gray-500 mb-4">
      Once you've covered the basics and your feel you're ready to
      move to the next level, we've got you covered, and so does
      Minitest. Because even though it's compact, Minitest is also
      super flexible and ready to test whatever sort of Ruby code you
      want to throw at it.  It's based around a simple architecture
      and supports customizations via plugins, so you'll be able to
      trick out your testing stack with third-party gems from a large
      and growing ecosystem of plugins.  Later sections of the book
      will deal with advanced topics on a deeper level including how to:
    </p>

    <ul class="list-disc text-xl pl-6 mb-4 leading-normal text-gray-500">
      <li>Test your Rails applications from top to bottom</li>
      <li>Customize your test reports with better, more actionable information</li>
      <li>Cover hard-to-reach code that you couldn't test before</li>
      <li>Write custom assertions and expectations specifically for your application</li>
      <li>Build and release your own framework extensions</li>
    </ul>
  </div>

  <hr class="bg-slate-200 text-slate-400 max-w-md mx-auto" style="height: 3px;">

  <div class="mx-auto max-w-6xl px-8 py-10">
    <h2 class="text-3xl font-extrabold tracking-tight text-center mb-6 sm:text-4xl lg:text-left">Why Minitest?</h2>

    <p class="text-xl text-gray-500 mb-4">
      Minitest is a full-featured framework for automated testing that
      supports both assertion-style and spec-style tests along with
      basic mocking, performance benchmarking, parallelization, and a
      simple plugin architecture.  All this in around 1500 lines of
      code compared to over 12,000 for RSpec.
    </p>

    <p class="text-xl text-gray-500 mb-4">
      Keeping things simple is the whole point, and it's one major
      reason why a lot of developers have been drawn to Minitest.  It
      takes a restrained approach by providing developers with a
      minimal set of standard assertions and expectations that they
      can use to test their code or build on with their own creations.
      For you the developer, that means:
    </p>
  </div>
</div>
